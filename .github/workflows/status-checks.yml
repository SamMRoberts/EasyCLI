name: Status Checks

on:
  pull_request:
    branches: ["main", "develop", "release*"]
  push:
    branches: ["release*"]

permissions:
  contents: read

concurrency:
  group: status-${{ github.ref }}
  cancel-in-progress: false

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1


jobs:
  format:
    name: fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'
          cache: true
          cache-dependency-path: '**/packages.lock.json'
      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
      - name: Restore (Library Only)
        run: dotnet restore EasyCLI/EasyCLI.csproj --locked-mode
      - name: Verify Formatting
        run: dotnet format --verify-no-changes

  build:
    name: build
    runs-on: ubuntu-latest
    needs: format
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'
          cache: true
          cache-dependency-path: '**/packages.lock.json'
      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
      - name: Restore
        run: |
          dotnet restore EasyCLI/EasyCLI.csproj --locked-mode
          dotnet restore EasyCLI.Demo/EasyCLI.Demo.csproj --locked-mode
      - name: Build (Release)
        run: |
          dotnet build EasyCLI/EasyCLI.csproj -c Release --no-restore
          dotnet build EasyCLI.Demo/EasyCLI.Demo.csproj -c Release --no-restore

  tests:
    name: tests
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'
          cache: true
          cache-dependency-path: '**/packages.lock.json'
      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
      - name: Restore (Tests)
        run: dotnet restore EasyCLI.Tests/EasyCLI.Tests.csproj --locked-mode || dotnet restore EasyCLI.Tests/EasyCLI.Tests.csproj
      - name: Test (All w/ Coverage)
        run: dotnet test EasyCLI.Tests/EasyCLI.Tests.csproj -c Release --no-restore --verbosity minimal /p:CollectCoverage=true /p:CoverletOutput=coverage/ /p:CoverletOutputFormat=lcov
      - name: Upload Coverage
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: EasyCLI.Tests/coverage/lcov.info

  cmdlets:
    name: cmdlets
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'
          cache: true
          cache-dependency-path: '**/packages.lock.json'
      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
      - name: Restore (Tests)
        run: dotnet restore EasyCLI.Tests/EasyCLI.Tests.csproj --locked-mode || dotnet restore EasyCLI.Tests/EasyCLI.Tests.csproj
      - name: Test (Cmdlets Only)
        run: dotnet test EasyCLI.Tests/EasyCLI.Tests.csproj -c Release --verbosity minimal --filter "CmdletTests"

  pack:
    name: pack
    runs-on: ubuntu-latest
    needs: [build, tests, cmdlets]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
            dotnet-version: '9.x'
            cache: true
            cache-dependency-path: '**/packages.lock.json'
      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
      - name: Restore
        run: dotnet restore EasyCLI/EasyCLI.csproj --locked-mode || dotnet restore EasyCLI/EasyCLI.csproj
      - name: Build
        run: dotnet build EasyCLI/EasyCLI.csproj -c Release --no-restore
      - name: Pack
        run: dotnet pack EasyCLI/EasyCLI.csproj -c Release -o dist --no-build -p:ContinuousIntegrationBuild=true
      - name: List Artifacts
        run: ls -1 dist
      - name: Upload Packages
        uses: actions/upload-artifact@v4
        with:
          name: nupkgs
          path: dist/*.nupkg

  deps-audit:
    name: deps
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'
      - name: Vulnerability Scan
        run: dotnet list EasyCLI/EasyCLI.csproj package --vulnerable || true
      - name: Deprecated Scan
        run: dotnet list EasyCLI/EasyCLI.csproj package --deprecated || true

  summary:
    name: summary
    runs-on: ubuntu-latest
    needs: [format, build, tests, cmdlets, pack, deps-audit]
    if: always()
    steps:
      - name: Results Summary
        run: |
          echo "## Status Checks Summary" >> $GITHUB_STEP_SUMMARY
          echo "Format: ${{ needs.format.result }}" >> $GITHUB_STEP_SUMMARY
          echo "Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "Tests: ${{ needs.tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "Cmdlets: ${{ needs.cmdlets.result }}" >> $GITHUB_STEP_SUMMARY
          echo "Pack: ${{ needs.pack.result }}" >> $GITHUB_STEP_SUMMARY
          echo "Deps: ${{ needs.deps-audit.result }}" >> $GITHUB_STEP_SUMMARY
