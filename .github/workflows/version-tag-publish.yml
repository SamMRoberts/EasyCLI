name: Release Branch Bootstrap & Publish (GitHub Packages)

# When a release/* branch is CREATED, automatically:
# 1. Derive version from branch name (release/<version>)
# 2. Update csproj <Version> (commit to the branch)
# 3. Create and push git tag v<version>
# 4. Restore, build, test, pack
# 5. Publish nupkg to GitHub Packages ONLY
# 6. Create GitHub Release (prerelease flag if version contains '-')

on:
  create: {}

permissions:
  contents: write
  packages: write

jobs:
  release_init_publish:
    name: Init + Test + Publish
    if: github.event_name == 'create' && github.event.ref_type == 'branch' && startsWith(github.event.ref, 'release/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Derive version from branch name
        id: derive
        run: |
          raw_ref='${{ github.event.ref }}' # e.g. release/0.4.0 or release/0.4.0-rc.1
          version="${raw_ref#release/}"
          if [ -z "$version" ]; then
            echo 'Could not parse version from branch name' >&2; exit 1
          fi
          # Basic SemVer-ish validation (allow pre-release with -)
          if ! echo "$version" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z.-]+)?$'; then
            echo "Branch version '$version' does not look like SemVer (X.Y.Z or X.Y.Z-prerelease)" >&2; exit 1
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Derived version: $version"

      - name: Update csproj version & commit
        run: |
          ver='${{ steps.derive.outputs.version }}'
          csproj='EasyCLI/EasyCLI.csproj'
          safe=$(printf '%s' "$ver" | sed -e 's/[\\/&]/\\&/g')
          if grep -q '<Version>[^<]*</Version>' "$csproj"; then
            sed -i.bak -E "s#<Version>[^<]+</Version>#<Version>$safe</Version>#" "$csproj" || { echo 'Failed to replace version'; exit 1; }
          else
            sed -i.bak -E "s#</PropertyGroup>#  <Version>$safe</Version>\n  </PropertyGroup>#" "$csproj" || { echo 'Failed to insert version'; exit 1; }
          fi
          rm -f "$csproj.bak"
          git config user.name 'github-actions'
            git config user.email 'github-actions@users.noreply.github.com'
          git add "$csproj"
          git commit -m "chore: set release version $ver" || echo 'No changes to commit'
          git push

      - name: Create tag
        run: |
          ver='${{ steps.derive.outputs.version }}'
          if git rev-parse "v$ver" >/dev/null 2>&1; then
            echo "Tag v$ver already exists (skipping)"
          else
            git tag "v$ver"
            git push origin "v$ver"
          fi

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'
          cache: true
          cache-dependency-path: '**/packages.lock.json'

      - name: Restore
        run: |
          dotnet restore EasyCLI/EasyCLI.csproj --locked-mode || dotnet restore EasyCLI/EasyCLI.csproj
          dotnet restore EasyCLI.Tests/EasyCLI.Tests.csproj --locked-mode || dotnet restore EasyCLI.Tests/EasyCLI.Tests.csproj

      - name: Build
        run: dotnet build EasyCLI/EasyCLI.csproj -c Release --no-restore

      - name: Test
        run: dotnet test EasyCLI.Tests/EasyCLI.Tests.csproj -c Release --no-restore --verbosity minimal

      - name: Pack
        run: dotnet pack EasyCLI/EasyCLI.csproj -c Release --no-build -p:ContinuousIntegrationBuild=true -o dist

      - name: Publish to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dotnet nuget remove source github 2>/dev/null || true
          dotnet nuget add source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            --name github \
            --username "${{ github.repository_owner }}" \
            --password "${GITHUB_TOKEN}" \
            --store-password-in-clear-text
          for pkg in dist/*.nupkg; do
            echo "Pushing $pkg to GitHub Packages";
            dotnet nuget push "$pkg" --api-key "${GITHUB_TOKEN}" --source github --skip-duplicate;
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.derive.outputs.version }}
          name: EasyCLI v${{ steps.derive.outputs.version }}
          prerelease: ${{ contains(steps.derive.outputs.version, '-') }}
          generate_release_notes: true
          files: dist/*.nupkg

      - name: Summary
        run: |
          echo "## Release Branch Bootstrap" >> $GITHUB_STEP_SUMMARY
          echo "Branch: $GITHUB_REF" >> $GITHUB_STEP_SUMMARY
          echo "Version: ${{ steps.derive.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "Tag: v${{ steps.derive.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "Published to GitHub Packages only (NuGet.org intentionally skipped)." >> $GITHUB_STEP_SUMMARY
          echo "Packages:" >> $GITHUB_STEP_SUMMARY
          ls -1 dist >> $GITHUB_STEP_SUMMARY
